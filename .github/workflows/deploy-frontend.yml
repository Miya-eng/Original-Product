name: Deploy Frontend to S3 + CloudFront

on:
  workflow_dispatch:  # ÊâãÂãïÂÆüË°å„ÇíË®±ÂèØ
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'

env:
  AWS_REGION: ap-northeast-1
  S3_BUCKET: jimotoko-frontend-s3
  NODE_VERSION: '20'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build application
      run: |
        cd frontend
        npm run build
      env:
        NEXT_PUBLIC_API_URL: https://jimotoko-api-alb-1288371471.ap-northeast-1.elb.amazonaws.com
        NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        NEXT_PUBLIC_ENV: production

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create backup
      run: |
        cd frontend
        BACKUP_NAME="${{ env.S3_BUCKET }}-backup-$(date +%Y%m%d-%H%M%S)"
        aws s3 sync s3://${{ env.S3_BUCKET }} s3://$BACKUP_NAME --delete || echo "Backup failed or bucket doesn't exist yet"

    - name: Deploy to S3
      run: |
        cd frontend
        
        # Next.js ÈùôÁöÑ„Ç®„ÇØ„Çπ„Éù„Éº„Éà„ÅÆÂ†¥Âêà
        if [ -d "./out" ]; then
          BUILD_DIR="./out"
        else
          BUILD_DIR="./.next"
        fi
        
        # HTML„Éï„Ç°„Ç§„É´Ôºà„Ç≠„É£„ÉÉ„Ç∑„É•„Å™„ÅóÔºâ
        aws s3 sync $BUILD_DIR s3://${{ env.S3_BUCKET }} \
          --exclude "*" \
          --include "*.html" \
          --cache-control "no-cache, no-store, must-revalidate" \
          --content-type "text/html; charset=utf-8" \
          --delete
        
        # Next.js„ÅÆ_next/static„Éá„Ç£„É¨„ÇØ„Éà„É™ÔºàÈï∑Êúü„Ç≠„É£„ÉÉ„Ç∑„É•Ôºâ
        if [ -d "$BUILD_DIR/_next/static" ]; then
          aws s3 sync $BUILD_DIR/_next/static s3://${{ env.S3_BUCKET }}/_next/static \
            --cache-control "public, max-age=31536000, immutable" \
            --delete
        fi
        
        # CSS/JS„Éï„Ç°„Ç§„É´ÔºàÈï∑Êúü„Ç≠„É£„ÉÉ„Ç∑„É•Ôºâ
        aws s3 sync $BUILD_DIR s3://${{ env.S3_BUCKET }} \
          --exclude "*.html" \
          --exclude "_next/static/*" \
          --include "*.css" \
          --include "*.js" \
          --cache-control "public, max-age=31536000, immutable"
        
        # ÁîªÂÉè„Éï„Ç°„Ç§„É´
        aws s3 sync $BUILD_DIR s3://${{ env.S3_BUCKET }} \
          --exclude "*" \
          --include "*.png" \
          --include "*.jpg" \
          --include "*.jpeg" \
          --include "*.gif" \
          --include "*.svg" \
          --include "*.webp" \
          --cache-control "public, max-age=31536000, immutable"
        
        # „Åù„ÅÆ‰ªñ„ÅÆ„Éï„Ç°„Ç§„É´
        aws s3 sync $BUILD_DIR s3://${{ env.S3_BUCKET }} \
          --exclude "*.html" \
          --exclude "*.css" \
          --exclude "*.js" \
          --exclude "*.png" \
          --exclude "*.jpg" \
          --exclude "*.jpeg" \
          --exclude "*.gif" \
          --exclude "*.svg" \
          --exclude "*.webp" \
          --exclude "_next/static/*" \
          --cache-control "public, max-age=3600" \
          --delete

    - name: Setup S3 static website hosting
      run: |
        aws s3api get-bucket-website --bucket ${{ env.S3_BUCKET }} > /dev/null 2>&1 || \
        aws s3 website s3://${{ env.S3_BUCKET }} --index-document index.html --error-document error.html

    - name: Invalidate CloudFront cache
      if: vars.CLOUDFRONT_DISTRIBUTION_ID != ''
      run: |
        INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*" \
          --query 'Invalidation.Id' \
          --output text)
        
        echo "Invalidation created: $INVALIDATION_ID"
        
        # ÁÑ°ÂäπÂåñÂÆå‰∫Ü„ÇíÂæÖÊ©ü
        aws cloudfront wait invalidation-completed \
          --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} \
          --id $INVALIDATION_ID

    - name: Deploy summary
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üìä Deployment summary:"
        aws s3 ls s3://${{ env.S3_BUCKET }}/ --human-readable --summarize
        echo "üåê S3 Website URL: http://${{ env.S3_BUCKET }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
        if [ -n "${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
          echo "üöÄ CloudFront URL: https://jimotoko.com"
        fi